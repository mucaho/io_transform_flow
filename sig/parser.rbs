# Root namespace module for the library.
module Parser
  VERSION: String

  # CLI that serves as the entry point of the application, if called from a terminal
  module CLI
    # Extract given command line options and
    # {Parser::Domain::Process.process! process!} {https://ruby-doc.org/core-3.1.2/ARGF.html ARGF}
    # to {https://docs.ruby-lang.org/en/3.0/globals_rdoc.html $stdout} or the given output file
    #
    # _@return_ — nothing
    def self.parse!: () -> void

    # _@param_ `options`
    def self.create_parser: (::Hash[Symbol, String | nil] options) -> OptionParser

    # _@param_ `options`
    def self.run_parser!: (::Hash[Symbol, String | nil] options) -> void
  end

  # Namespace module for implementations of abstract domain concepts from the library
  module Impl
    # Example transformation
    module CountURIsPipe
      extend Parser::Domain::Pipe

      # {include:Parser::Domain::Pipe}
      # This transformation scans each +String+ line and
      # builds an ordered map between URI paths and their occurence count,
      # with each +String+ entry of the form +URI_path count+,
      # sorted by that count in descending order.
      #
      # It tries to extract a
      # {https://ruby-doc.org/stdlib-2.5.1/libdoc/uri/rdoc/URI.html#method-c-split-label-Synopsis URI path component}
      # from the first word encountered in each (conceptual) line.
      # Otherwise, the line is ignored from the result.
      #
      # _@param_ `source` — object responding to +:to_enum+
      #
      # _@return_ — an enumeratorable (+:to_enum+) sorted collection of +String+s
      def self.transform: (Enumerator source) -> Enumerator

      # Convert +self+ to a {https://ruby-doc.org/core-3.1.2/Proc.html Proc}
      # having the signature of {#transform}.
      #
      # _@return_ — +self+ as a callable +Proc+
      def self.to_proc: () -> Proc
    end
  end

  # Namespace module for domain concepts used in the library
  module Domain
    # Domain module that models the process of transforming things from a source to a destination resource,
    # conceptually line by line.
    module Process
      # Process the given source {https://ruby-doc.org/core/IO.html IO} using the given +transform+,
      # by writing the obtained transformation output to given destination
      # {https://ruby-doc.org/core/IO.html IO}.
      #
      # _@param_ `source` — object responding to +:each_line+
      #
      # _@param_ `destination` — object responding to +:puts+
      #
      # _@param_ `transform` — object responding to +:to_proc+
      #
      # _@return_ — nothing
      def self.process!: (IO source, IO destination, Proc transform) -> void
    end

    # Domain module that models the actual transformation of a {Parser::Domain::Process Process}.
    # This module implements the identity {#transform}.
    module Pipe
      extend Parser::Domain::Pipe

      # Transform an {https://ruby-doc.org/core/Enumerator.html Enumerator} to another
      # {https://ruby-doc.org/core/Enumerator.html Enumerator}.
      #
      # _@param_ `source` — object responding to +:to_enum+
      #
      # _@return_ — object responding to +:to_enum+
      def transform: (Enumerator source) -> Enumerator

      # Convert +self+ to a {https://ruby-doc.org/core-3.1.2/Proc.html Proc}
      # having the signature of {#transform}.
      #
      # _@return_ — +self+ as a callable +Proc+
      def to_proc: () -> Proc

      # Transform an {https://ruby-doc.org/core/Enumerator.html Enumerator} to another
      # {https://ruby-doc.org/core/Enumerator.html Enumerator}.
      #
      # _@param_ `source` — object responding to +:to_enum+
      #
      # _@return_ — object responding to +:to_enum+
      def self.transform: (Enumerator source) -> Enumerator

      # Convert +self+ to a {https://ruby-doc.org/core-3.1.2/Proc.html Proc}
      # having the signature of {#transform}.
      #
      # _@return_ — +self+ as a callable +Proc+
      def self.to_proc: () -> Proc
    end
  end
end
